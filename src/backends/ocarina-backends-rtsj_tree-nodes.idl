/*****************************************************************************
**                                                                          **
**                           OCARINA COMPONENTS                             **
**                                                                          **
**     O C A R I N A . B A C K E N D S . R T S J _ T R E E . N O D E S      **
**                                                                          **
**                  Copyright (C) 2009, GET-Telecom Paris.                  **
**                                                                          **
** Ocarina  is free software;  you  can  redistribute  it and/or  modify    **
** it under terms of the GNU General Public License as published by the     **
** Free Software Foundation; either version 2, or (at your option) any      **
** later version. Ocarina is distributed  in  the  hope  that it will be    **
** useful, but WITHOUT ANY WARRANTY;  without even the implied warranty of  **
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General **
** Public License for more details. You should have received  a copy of the **
** GNU General Public License distributed with Ocarina; see file COPYING.   **
** If not, write to the Free Software Foundation, 51 Franklin Street, Fifth **
** Floor, Boston, MA 02111-1301, USA.                                       **
**                                                                          **
** As a special exception,  if other files  instantiate  generics from this **
** unit, or you link  this unit with other files  to produce an executable, **
** this  unit  does not  by itself cause  the resulting  executable to be   **
** covered  by the  GNU  General  Public  License. This exception does not  **
** however invalidate  any other reasons why the executable file might be   **
** covered by the GNU Public License.                                       **
**                                                                          **
**                 Ocarina is maintained by the Ocarina team                **
**                       (ocarina-users@listes.enst.fr)                     **
**                                                                          **
*****************************************************************************/

module Ocarina::Backends::RTSJ_Tree::Nodes {
  
  /******************/
  /* Internal Nodes */
  /******************/
  
  typedef long Name_Id;
  typedef long Value_Id;
  typedef octet Operator_Id;
  
  /******************/
  /* Internal Nodes */
  /******************/
  
  interface Node_Id {
    Node_Id Next_Node;
    Node_Id Frontend_Node;
  };
  
  interface List_Id {
    Node_Id First_Node;
    Node_Id Last_Node;
  };
  
  interface Definition : Node_Id {
    Node_Id Defining_Identifier;
  };
    
  interface Defining_Identifier : Node_Id {
    Name_Id Name;
    Node_Id Corresponding_Node;
    Node_Id Parent_Unit_Name;
  };
  
  interface Declaration_List : List_Id {};
  interface Statement_List : List_Id {};
  interface Method_List : List_Id {};
  interface Parameter_List : List_Id {};
  interface Attribute_List : List_Id {};
  interface Class_List : List_Id {};
  interface Header_List : List_Id {};
  interface Enumeration_Literals : List_Id {};

  /******************/
  /*   Functions    */
  /******************/

  /*
   * <return_type> myfunc (arg1, arg2, ..., argN);
   */
  interface Function_Specification : Definition {
    List_Id Visibility;
    Node_Id Return_Type;
    List_Id Parameters;
    List_Id Throws;
  };

  /*
   * int myfunc (int arg1 , char arg2)
   * {
   *    ...
   *    return (value);
   * }
   */
  interface Function_Implementation : Node_Id {
    Node_Id    Specification;
    List_Id    Declarations;
    List_Id    Statements;
    //Node_Id    Compile_Unit;
  };
  
  /*
   * myfunc (arg1, arg2);
   */
  interface Call_Function : Definition {
    List_Id    Parameters;
  };
  
  interface Parameter_Specification : Definition {
    Node_Id    Parameter_Type;
  };

  interface String_Declaration : Definition {} ;
  
  /******************/
  /*   Statements   */
  /******************/
  
  interface Implementation : Node_Id {
    Node_Id Package_Name;
    List_Id Import;
    Node_Id Class;
  };
  
  interface Java_Comment : Definition {
    boolean Has_Header_Spaces;
  };
  
  interface Package_Statement : Definition {};
    
  interface Import_Statement : Node_Id {
    Node_Id Import_Name;
  };
    
  /*interface If_Statement : Node_Id {
    Node_Id Condition;
    List_Id Statements;
    List_Id Else_Statements;
    };*/
  
  
  interface Switch_Statement : Node_Id {
    Node_Id Expr;
    List_Id Case_Statements;
  };
  
  
  interface Case_Statement : Node_Id {
    List_Id Labels;
    List_Id Statements;
  };
  
  /*interface While_Statement : Node_Id {
    Node_Id Condition;
    List_Id Statements;
    };*/
  
  /* For is a loop defined this way :
     for (i = 0; i <= 10; i++){
     Statements
     }
  */
  interface For_Statement : Node_Id {
    Node_Id Init_Statement;
    Node_Id Iteration_Condition;
    Node_Id Step_Expression;
    List_Id Statements;
  };
  
  interface Assignment_Statement : Definition {
    Node_Id Expression;
  };
  
  interface Return_Statement : Node_Id {
    Node_Id Expression;
  };
  
  interface Null_Statement : Node_Id {};

  interface Cast_Statement : Definition {
    Node_Id Cast_Type;
  };
    
  /*
   * Array_Declaration is used to generate
   * code like myarray[3]
   * or myarray[mysize];
   */
  interface Array_Declaration : Definition {
    Node_Id Array_Size;
  };

  interface Array_Value : Definition {
    Node_Id Array_Item;
  };

  interface Full_Array_Declaration : Node_Id {
    Node_Id Array_Declaration;
    List_Id Array_Assignments;
  };

  /* */
  interface Class_Statement : Definition {
    List_Id Visibility;
    Node_Id Extends_Statement;
    List_Id Implements_Statement;
    List_Id Throws_Statement;
    //List_Id Declarations;
    List_Id Attributes;
    List_Id Methods;
    List_Id Classes;
  };
  
  
  /*
    new MyObject ([Param1, Param2, ..., ParamN]) {
    ... statements ...
    }
  */
  interface New_Statement : Definition {
    List_Id Parameters;
    boolean Is_Array;
  };
  
  /*
    try {
    ...
    }
    catch (MyException me) {
    ...
    }
    catch (MyOtherException moe) {
    ...
    } 
  */
  interface Try_Statement : Node_Id {
    List_Id Statements;
    List_Id Catch_Statements;
  };
  
  interface Catch_Statement : Node_Id {
    Node_Id Exception_Caught;
    List_Id Statements;
  };

  interface Throw_Statement : Definition {};
  
  interface Variable_Declaration : Definition {
    List_Id Visibility;
    Node_Id Used_Type;
    Node_Id Value;
  };

  interface Literal : Node_Id {
    Value_Id Value_Literal;
  };

  /*
    <Left_Member>.<Right_Member>
   */
  interface Pointed_Notation : Definition {
    Node_Id Right_Member;
  };
  
  interface Expression : Node_Id {
    Node_Id Left_Expression;
    Operator_Id Operator_Expression;
    Node_Id Right_Expression;
  };
  
  interface Visibility : Node_Id {};
  
  interface Public       : Visibility {};
  interface Protected    : Visibility {};
  interface Private      : Visibility {};
  interface Abstract     : Visibility {};
  interface Static       : Visibility {};
  interface Final        : Visibility {};
  
  /******************/
  /*   Aggregates   */
  /******************/
  
  /*
   * The list of Enum_Aggregate contains
   * Expressions or Identifier
   */
  interface Enumerator : Definition {
    List_Id Enum_Members;
  };
  
  
  /******************/
  /*   Base Types   */
  /******************/
  
  interface Base_Type {
    Name_Id Image;
  };  
  
  interface Int : Base_Type {};
  interface _Short : Base_Type {};
  interface _Float : Base_Type {};
  interface _Double : Base_Type {};
  interface _Char : Base_Type {};
  interface _String : Base_Type {};
  interface _Boolean : Base_Type {};
  interface _Byte : Base_Type {};
  interface _Void : Base_Type {};

  /****************************/
  /*   Common Tree Bindings   */
  /****************************/
  interface Tree_Bindings : Node_Id {
    /* Units */
    Node_Id Main_Node;

    /* Entities */
    Node_Id Type_Definition_Node;
    Node_Id Feature_Subprogram_Node;
    Node_Id Subprogram_Node;
  };

  interface HI_Tree_Bindings : Node_Id {
    /* Units */
    Node_Id Main_Node;
    Node_Id Activity_Node;
    Node_Id Subprograms_Node;
    Node_Id Generated_Types_Node;
    Node_Id Transport_Node;
    Node_Id Deployment_Node;
    Node_Id Naming_Node;
    Node_Id Transport_High_Level_Node;
    
    /* Entities */
    Node_Id Enumerator_Node;
  };
  
  /*************************/
  /*   PolyORB-HI Module   */
  /*************************/
  
  interface HI_Distributed_Application : Node_Id {
    Name_Id Name;
    List_Id Units;
    List_Id HI_Nodes;
  };

  interface HI_Node : Node_Id {
    Name_Id Name;
    List_Id Units;
    Node_Id Distributed_Application;
  };

  interface Source_Files : List_Id {
 };
 
  interface Source_File : Definition {
    Node_Id Distributed_Application_Unit;
    List_Id Imported_Headers;
    List_Id Declarations;
    List_Id Statements;
  };
  
  interface API_Unit : Node_Id {
    /* Whatever the distributed application kind is, a main function
       is required for each node */
    List_Id    Sources;
    Node_Id    Entity;
  };  
  
  /* This is the root node of the packages generated specifically for
     an PolyORB-HI Distributed application */
  
  interface HI_Unit : API_Unit {
    Node_Id Main_Source;
    Node_Id Activity_Source;
    Node_Id Deployment_Source;
    Node_Id Subprograms_Source;
    Node_Id Marshallers_Source;
    Node_Id Naming_Source;
    Node_Id Request_Source;
    Node_Id Generated_Types_Source;
    Node_Id Transport_High_Level_Source;
  };
    
};
